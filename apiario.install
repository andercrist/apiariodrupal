<?php
/**
 * Módulo APIario
 * Arquivo onde contem as funções de instalação do módulo
 * @author Anderson Silva
 * @version 1.0
 */

require_once('apiario.functions');

/**
* Função de instalação do módulo
* @return null
**/
function apiario_install() {
  // Criando tipo de conteúdo apiario
  node_types_rebuild();
  $types = node_type_get_types();
  
  // Adicionar o campo corpo para o tipo de nó
  node_add_body_field($types['apiario']);
  // Carregar a definição de instância para o corpo de nosso tipo de conteúdo
  $body_instance = field_info_instance('node', 'body', 'apiario');
  // Configurando o body field
  $body_instance['type'] = 'text_summary_or_trimmed';
  $body_instance['label'] = 'Descrição simples do vídeo';
  $body_instance['display'] = array(
    'default' => array(
      'label' => 'above', 
      'type' => 'text_default',
      'weight' => 0,
    ),
    'teaser' => array(
      'label' => 'hidden', 
      'type' => 'text_summary_or_trimmed',
      'weight' => 0,
    ),
  );
  $body_instance['widget']['weight'] = 0;
  
  //Salvar nossas alterações à instância no campo body
  field_update_instance($body_instance);
  
  //Criar todos os campos que estão adicionando ao nosso tipo de conteúdo
  foreach (_apiario_installed_fields() as $field) {
    field_create_field($field);
  }
  
  //Criar toda a instância para os nossos campos
  foreach (_apiario_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'apiario';
    field_create_instance($instance);
  }
  //Cria o usuário interno
  apiario_createUser();
  //Service entity
  variable_set('services_entity_resource_class', 'ServicesEntityResourceControllerClean');

}


/**
 * Implementando hook_uninstall().
 * @return null
 **/
function apiario_uninstall() {
  // gather all the content while the module was enabled
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'apiario'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  
  // Apagar todos os nós de uma só vez
  node_delete_multiple($nids);
  
  // Apagar todos os campos definidos por este módulo
  foreach (array_keys(_apiario_installed_fields()) as $field) {
    field_delete_field($field);
  }
  
  // Excluir todas as instâncias campo restantes ligados a este tipo de conteúdo
  $instances = field_info_instances('node', 'apiario');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }
  
  // Apagar nosso tipo de conteúdo
  node_type_delete('apiario');
  
  // Limpar todas as informações de campo
  field_purge_batch(1000);
}

/**
 * Função responsável em criar o usuário para acesso a API do drupal
 **/
function apiario_createUser() {
  $nome = 'apiario';
  $user = user_load_by_name($nome);
  if(!$user){
    //Criar papel com permissões para editar os vídeos
    $apiario_role = new stdClass();
    $apiario_role->name = $nome;
    $apiario_role->weight = 2;
    //Salva o papel
    user_role_save($apiario_role);
    //Permissões adicionais
    user_role_grant_permissions($apiario_role->rid, array(
      'edit any apiario content',
      'edit own apiario content',
      'bypass node access',
      'administer nodes',
    ));

    // Cria o usuário com o papel criado
    $edit = array();
    $edit['name']   = $nome;
    $edit['mail']   = 'apiario@aovivonaweb.tv';
    $edit['roles']  = array($apiario_role->rid => $apiario_role->rid);
    $edit['pass']   = user_password(32);
    $edit['status'] = 1;
    //Salva o usuário
    $account = user_save(drupal_anonymous_user(), $edit);
    $key = user_password(32);
    $secret = user_password(32);
    //Create costumer key and secret
    $consumer = new DrupalOAuthConsumer($key, $secret, array(
      'callback_url' => HOSTAPI + '/drupal',
      'uid' => $account->uid,
      'provider_consumer' => TRUE,
    ));
    //Customer name
    $consumer->name = 'apiario';
    //Context name
    $consumer->context = 'padrao';
    //Url Callback
    $consumer->callback_url = HOSTAPI + '/drupal';
    // Update or create the consumer.
    $update = $consumer->in_database;
    $consumer->write(); 
  }
}